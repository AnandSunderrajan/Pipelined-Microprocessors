//his module is the controller for the arbiter it hold the control logic for it
module arbiter_control
(
    /* Input and output port declarations */
    input clk,
    input logic internal_mem_read,
	 input logic internal_mem_write,
	 input logic d_mem_read,
	 input logic d_mem_write,
	 input logic l2_mem_response,
	 input logic l2hit,
	 
	 //To arbiter datapath
	 output logic readsignalmux_select,
	 output logic writesignalmux_select,
	 output logic memaddrmux_select,
	 output logic memwdatamux_select,
	 output logic memrdatademux_select,
	 output logic byteenablemux_select,
	 output logic memresponsemux_select
);

enum int unsigned {
    /* List of states */
    idless,
	 s_imiss,
	 s_dmiss,
	 s_bothmiss
} state, next_state;

always_comb
begin : state_actions
    /* Default output assignmen	 input logic arbiter_ts */
    
    /* Actions for each state */
     
	  readsignalmux_select = 1'b0;
	  writesignalmux_select = 1'b0;
	  memaddrmux_select = 1'b0;
	  memwdatamux_select = 1'b0;
	  memrdatademux_select = 1'b0;
	  memresponsemux_select = 1'b0;
	  byteenablemux_select = 1'b0;
     case(state)
			idless:begin
			end
			s_imiss:begin
				readsignalmux_select = 1'b1;
				writesignalmux_select = 1'b1;
				memaddrmux_select = 1'b1;
				memwdatamux_select = 1'b1;
				memrdatademux_select = 1'b1;
				memresponsemux_select = 1'b1;
				byteenablemux_select = 1'b1;
			end
			s_dmiss:begin
			end
			s_bothmiss:begin
			end
     default:/* Do nothing */;
     endcase 
end

always_comb
begin : next_state_logic
    /* Next state information and conditions (if any)
     * for transitioning between states */
     next_state = state;

     case(state)
        idless:begin
				if((internal_mem_read || internal_mem_write) &&(d_mem_read || d_mem_write))
					next_state = s_bothmiss;
				else if(internal_mem_read || internal_mem_write)
					next_state = s_imiss;
				else if((d_mem_read || d_mem_write) &(!l2hit))
					next_state = s_dmiss;
				else 
					next_state = idless;
			end
			s_imiss:begin
				if((l2_mem_response == 1 ) && (!(d_mem_read || d_mem_write)))
					next_state = idless;
				else if((l2_mem_response == 1 ) && (d_mem_read || d_mem_write))
					next_state = s_dmiss;
				else 
					next_state = s_imiss;
			end
			s_dmiss:begin
				if(l2_mem_response == 1)
					next_state = idless;
				else
					next_state = s_dmiss;
			end
			s_bothmiss:begin
				if(l2_mem_response == 1)
					next_state = s_imiss;
				else
					next_state = s_bothmiss;
			end
		   default: 
				next_state = idless;
        endcase
end

always_ff @(posedge clk)
begin: next_state_assignment
    /* Assignment of next state on clock edge */
     begin : next_state_assignment
         state <= next_state;
     end
end

endmodule


//This module is the top level module for the arbitr

import LC_3B_2s::*;
module arbiter
(
    input clk,
    input logic internal_mem_read,
	 input logic internal_mem_write,
	 input LC_3B_word internal_mem_addr,
	 input cache_line internal_mem_wdata,
	 input logic d_mem_read,
	 input logic d_mem_write,
	 input LC_3B_word d_mem_addr,
	 input cache_line d_mem_wdata, 
	 input cache_line l2_mem_rdata,
	 input l2_mem_response,
	 input logic[1:0] d_mem_byte_enable,
	 input logic[1:0] internal_mem_byte_enable,
	 input logic l2hit,
	 
	 output logic arbiter_internal_mem_response,
	 output logic arbiter_d_mem_response,
	 
	 output cache_line arbiter_mem_wdata,
	 output logic arbiter_mem_write,
	 output logic arbiter_mem_read,
	 output LC_3B_word arbiter_mem_addr,
	 output cache_line arbiter_d_mem_rdata,
	 output logic[1:0] arbiter_physicalmem_byte_enable,
	 output cache_line arbiter_internal_mem_rdata
	 
);


/*internal signals*/
logic readsignalmux_select;
logic writesignalmux_select;
logic memaddrmux_select;
logic memwdatamux_select;
logic memrdatademux_select;
logic memresponsemux_select;
logic byteenablemux_select;


arbiter_control arbiter_control
(
	 .clk,
    .internal_mem_read(internal_mem_read),
	 .internal_mem_write(internal_mem_write),
	 .d_mem_read(d_mem_read),
	 .d_mem_write(d_mem_write),
	 .l2_mem_response(l2_mem_response),
	 .l2hit(l2hit),
	 
	 //To arbiter datapath
	 .readsignalmux_select(readsignalmux_select),
	 .writesignalmux_select(writesignalmux_select),
	 .memaddrmux_select(memaddrmux_select),
	 .memwdatamux_select(memwdatamux_select),
	 .memrdatademux_select(memrdatademux_select),
	 .byteenablemux_select(byteenablemux_select),
	 .memresponsemux_select(memresponsemux_select)
);

datapath_arbiter datapath_arbiter
(
    .clk,
	 /*inputs from cpu*/
    .internal_mem_read(internal_mem_read),
	 .internal_mem_write(internal_mem_write),
	 .internal_mem_addr(internal_mem_addr),
	 .internal_mem_wdata(internal_mem_wdata),
	 .d_mem_read(d_mem_read),
	 .d_mem_write(d_mem_write),
	 .d_mem_addr(d_mem_addr),
	 .d_mem_wdata(d_mem_wdata), 
	 .l2_mem_rdata(l2_mem_rdata),
	 .l2_mem_response(l2_mem_response),
	 .d_mem_byte_enable(d_mem_byte_enable),
	 .internal_mem_byte_enable(internal_mem_byte_enable),
	 //From arbiter control
	 .readsignalmux_select(readsignalmux_select),
	 .writesignalmux_select(writesignalmux_select),
	 .memaddrmux_select(memaddrmux_select),
	 .memwdatamux_select(memwdatamux_select),
	 .memrdatademux_select(memrdatademux_select),
	 .memresponsemux_select(memresponsemux_select),
	 .byteenablemux_select(byteenablemux_select),
	 
	 .arbiter_internal_mem_response(arbiter_internal_mem_response),
	 .arbiter_d_mem_response(arbiter_d_mem_response),
	 .arbiter_d_mem_rdata(arbiter_d_mem_rdata),
	 .arbiter_internal_mem_rdata(arbiter_internal_mem_rdata),
	 .arbiter_mem_wdata(arbiter_mem_wdata),
	 .arbiter_mem_write(arbiter_mem_write),
	 .arbiter_mem_read(arbiter_mem_read),
	 .arbiter_physicalmem_byte_enable(arbiter_physicalmem_byte_enable),
	 .arbiter_mem_addr(arbiter_mem_addr)
);
endmodule




