//Toplevel module for the cache structure - includes the controller and datapth

import LC_3B_2s::*;
module L2Cache(
input clk,
input cache_line physicalmem_rdata,
input logic physicalmem_response,
input LC_3B_mem_wmask l2_mem_byte_enable,
input LC_3B_word l2_mem_addr,
input cache_line l2_mem_wdata, //cache_line size for l2
input l2_mem_read,
input l2_mem_write,
output l2_mem_response,
output cache_line l2_mem_rdata,  //cache line size for l2
output logic readphysicalmem,
output logic writephysicalmem,
output logic l2hit,
output LC_3B_word physicalmem_addr,
output cache_line physicalmem_wdata);

logic [1:0] pseudooutputLRU;
logic hit, writedata0, writedata1, writevalid0, writevalid1, writetag0, writetag1, data2write, data3write, writevalid2;
logic writevalid3, tag2write, tag3write, LRU_in, way0and_out, pseudoLRU_write, dirtymux_out, stbwritemux_select;
logic MUXRW_select, writedirty0, writedirty1, inputdirty0, inputdirty1, writedirty2, writedirty3, inputdirty2, inputdirty3, physicalmemMXselect;

assign l2hit = hit;

L2Cache_control L2Cache_control(
.clk,
.mem_addr(l2_mem_addr),
.mem_byte_enable(l2_mem_byte_enable),
.mem_write(l2_mem_write),
.mem_read(l2_mem_read),
.mem_wdata(l2_mem_wdata),
.pseudooutputLRU(pseudooutputLRU),
.way0and_out(way0and_out),
.pseudoLRU_write(pseudoLRU_write),
.physicalmem_rdata(physicalmem_rdata),
.physicalmem_response(physicalmem_response),
.dirtymux_out(dirtymux_out),
.hit(hit),
.physicalmemMXselect(physicalmemMXselect),
.MUXRW_select(MUXRW_select),
.stbwritemux_select(stbwritemux_select),
.mem_response(l2_mem_response),
.readphysicalmem(readphysicalmem),
.writedata0(writedata0),
.writedata1(writedata1),
.writetag0(writetag0), 
.writetag1(writetag1),
.writevalid0(writevalid0),
.writevalid1(writevalid1),
.writedirty0(writedirty0),
.writedirty1(writedirty1),
.inputdirty0(inputdirty0),
.inputdirty1(inputdirty1),
.data2write(data2write),
.data3write(data3write),
.tag2write(tag2write), 
.tag3write(tag3write),
.writevalid2(writevalid2),
.writevalid3(writevalid3),
.writedirty2(writedirty2),
.writedirty3(writedirty3),
.inputdirty2(inputdirty2),
.inputdirty3(inputdirty3),
.writephysicalmem(writephysicalmem));

l2DatapathCache  l2DatapathCache(
.clk,
.mem_addr(l2_mem_addr),
.writedata0(writedata0),
.writedata1(writedata1),
.writetag0(writetag0),
.writetag1(writetag1),
.writevalid0(writevalid0),
.writevalid1(writevalid1),
.writedirty0(writedirty0),
.writedirty1(writedirty1),
.inputdirty0(inputdirty0),
.inputdirty1(inputdirty1),
.data2write(data2write),
.data3write(data3write),
.tag2write(tag2write),
.tag3write(tag3write),
.writevalid2(writevalid2),
.writevalid3(writevalid3),
.writedirty2(writedirty2),
.writedirty3(writedirty3),
.inputdirty2(inputdirty2),
.inputdirty3(inputdirty3),
.physicalmem_rdata(physicalmem_rdata),
.l2_mem_wdata(l2_mem_wdata),
.l2_mem_rdata(l2_mem_rdata),
.mem_byte_enable(l2_mem_byte_enable),
.pseudoLRU_write(pseudoLRU_write),
.way0and_out(way0and_out),
.MUXRW_select(MUXRW_select),
.stbwritemux_select(stbwritemux_select),
.physicalmemMXselect(physicalmemMXselect),
.hit(hit),
.dirtymux_out(dirtymux_out),
.pseudooutputLRU(pseudooutputLRU),
.physicalmem_addr(physicalmem_addr),
.physicalmem_wdata(physicalmem_wdata));

endmodule


//This module hold the cache controller whihc basically contains the state machine that is there for the cache

import LC_3B_2s::*;
module L2Cache_control(
input clk,
input LC_3B_word mem_addr,
input [1:0] mem_byte_enable,
input mem_write,
input mem_read,
input cache_line mem_wdata,
input logic [1:0] pseudooutputLRU,
input logic way0and_out,
input cache_line physicalmem_rdata,
input physicalmem_response,
input logic dirtymux_out,
input logic hit,
output logic MUXRW_select,
output logic stbwritemux_select,
output logic mem_response,
output logic readphysicalmem,
output logic writedata0, writedata1,
output logic writetag0, writetag1,
output logic writevalid0, writevalid1,
output logic writedirty0, writedirty1,
output logic inputdirty0, inputdirty1,
output logic data2write, data3write,
output logic tag2write, tag3write,
output logic writevalid2, writevalid3,
output logic writedirty2, writedirty3,
output logic inputdirty2, inputdirty3,
output logic writephysicalmem,
output logic physicalmemMXselect,
output logic pseudoLRU_write);

enum int unsigned {
idless, cacheupdatess, physicalmemss, writebackss, allocatess} state, next_state;

always_comb
begin : state_actions
	writetag0 = 1'b0;
	stbwritemux_select = 1'b0;
	MUXRW_select = 1'b0;
	writetag1 = 1'b0;
	writedata0 = 1'b0;
	writedata1 = 1'b0;
	writevalid0 = 1'b0;
	writevalid1 = 1'b0;
	writedirty0 = 1'b0;
	writedirty1 = 1'b0;
	inputdirty0 = 1'b0;
	inputdirty1 = 1'b0;
	tag2write = 1'b0;
	tag3write = 1'b0;
	data2write = 1'b0;
	data3write = 1'b0;
	writevalid2 = 1'b0;
	writevalid3 = 1'b0;
	writedirty2 = 1'b0;
	writedirty3 = 1'b0;
	inputdirty2 = 1'b0;
	inputdirty3 = 1'b0;
	mem_response = 1'b0;
	readphysicalmem = 1'b0;
	pseudoLRU_write = 1'b0;
	writephysicalmem = 1'b0;
	physicalmemMXselect = 1'b0;
     
	case(state)
	idless: begin
		pseudoLRU_write = 0;
		if(mem_read && hit)
		begin
			mem_response = 1;
			pseudoLRU_write = 1;
		end
		else if((mem_write && hit) && (mem_byte_enable != 2'b00))
		begin
			pseudoLRU_write = 1;
			if(way0and_out)
				begin
					writedata0 = 1;
					writetag0 = 1;
					writevalid0 = 1;
					writedirty0 = 1;
					inputdirty0 = 1;
				end
			else 
				begin
					writedata1 = 1;
					writetag1 = 1;
					writevalid1 = 1;
					writedirty1 = 1;
					inputdirty1 = 1;
				end
				mem_response = 1;
				MUXRW_select = 1;
		end
		end
	cacheupdatess: begin
		if(mem_read)
		pseudoLRU_write = 1;
		end
	physicalmemss: begin
		if(mem_write)
		begin
			if((mem_byte_enable == 2'b10) | (mem_byte_enable == 2'b01))
				stbwritemux_select = 1;
				MUXRW_select = 1;
				if(pseudooutputLRU == 2'b00)
				begin
					writedata0 = 1;
					writetag0 = 1;
					writevalid0 = 1;
					writedirty0 = 1;
					inputdirty0 = 1;
				end
				else if(pseudooutputLRU == 2'b01)
				begin
					writedata1 = 1;
					writetag1 = 1;
					writevalid1 = 1;
					writedirty1 = 1;
					inputdirty1 = 1;
				end
				else if(pseudooutputLRU == 2'b10)
				begin
					data2write = 1;
					tag2write = 1;
					writevalid2 = 1;
					writedirty2 = 1;
					inputdirty2 = 1;
				end
				else if(pseudooutputLRU == 2'b11)
				begin
					data3write = 1;
					tag3write = 1;
					writevalid3 = 1;
					writedirty3 = 1;
					inputdirty3 = 1;
				end
			end
		mem_response = 1;
		end
	writebackss: begin
		writephysicalmem = 1;
		physicalmemMXselect = 1;
		end
	allocatess: begin
		readphysicalmem = 1;
		if(pseudooutputLRU == 2'b00)
		begin
			writedata0 = 1;
			writetag0 = 1;
			writevalid0 = 1;
			writedirty0 = 1;
			inputdirty0 = 1;
		end
		else if(pseudooutputLRU == 2'b01)
		begin
			writedata1 = 1;
			writetag1 = 1;
			writevalid1 = 1;
			writedirty1 = 1;
			inputdirty1 = 1;
		end
		else if(pseudooutputLRU == 2'b10)
		begin
			data2write = 1;
			tag2write = 1;
			writevalid2 = 1;
			writedirty2 = 1;
			inputdirty2 = 1;
		end
		else if(pseudooutputLRU == 2'b11)
		begin
			data3write = 1;
			tag3write = 1;
			writevalid3 = 1;
			writedirty3 = 1;
			inputdirty3 = 1;
		end
	end
     default:;
     endcase 
end

always_comb
begin : next_state_logic
next_state = state;
case(state)
	idless:
		if(mem_read && hit)
			next_state = idless;
		else if(!hit && !dirtymux_out && (mem_read || mem_write))
			next_state = allocatess;
		else if(!hit && dirtymux_out)
			next_state = writebackss;
		cacheupdatess:
			next_state = physicalmemss;
		physicalmemss:
			next_state = idless;
		writebackss:
			if(physicalmem_response == 0)
				next_state = writebackss;
			else
				next_state = allocatess;
		allocatess:
			if(physicalmem_response == 0)
				next_state = allocatess;
			else
				next_state = cacheupdatess;
		default: 
			next_state = idless;
        endcase
end

always_ff @(posedge clk)
begin: next_state_assignment
     begin : next_state_assignment
         state <= next_state;
     end
end
endmodule



//////////////////////////////////////////////////////////
////////////////DCACHE MODULES NOW////////////////////////
//////////////////////////////////////////////////////////


//This module hold the cache controller whihc basically contains the state machine that is there for the cache

import LC_3B_2s::*;
module CONTROLLER_DCache(
input clk,
input LC_3B_word mem_addr,
input [1:0] mem_byte_enable,
input mem_write,
input mem_read,
input LC_3B_word mem_wdata,
input logic outputLRU,
input logic way0and_out,
input logic DCache_enable,
input cache_line physicalmem_rdata,
input physicalmem_response,
input logic dirtymux_out,
input logic hit,
output logic MUXRW_select,
output logic stbwritemux_select,
output logic LRU_in,
output logic mem_response,
output logic readphysicalmem,
output logic writedata0, writedata1,
output logic writetag0, writetag1,
output logic writevalid0, writevalid1,
output logic writedirty0, writedirty1,
output logic inputdirty0, inputdirty1,
output logic writephysicalmem,
output logic physicalmemMXselect,
output logic LRU_write);

enum int unsigned {idless, cacheupdatess, physicalmemss, writebackss, allocatess} state, next_state;

always_comb
begin : state_actions
	writetag0 = 1'b0;
	stbwritemux_select = 1'b0;
	MUXRW_select = 1'b0;
	writetag1 = 1'b0;
	writedata0 = 1'b0;
	writedata1 = 1'b0;
	writevalid0 = 1'b0;
	writevalid1 = 1'b0;
	writedirty0 = 1'b0;
	writedirty1 = 1'b0;
	inputdirty0 = 1'b0;
	inputdirty1 = 1'b0;
	mem_response = 1'b0;
	readphysicalmem = 1'b0;
	LRU_in = 1'b0;
	LRU_write = 1'b0;
	writephysicalmem = 1'b0;
	physicalmemMXselect = 1'b0;

case(state)
	idless: begin
		LRU_write = 0;
		if(mem_read && hit)
		begin
			mem_response = 1;
			LRU_write = 1;
			if(way0and_out && hit)
			LRU_in = 1;
			else if(!way0and_out && hit)
				LRU_in = 0;
		end
		else if((mem_write && hit && DCache_enable) && (mem_byte_enable != 2'b00))
		begin
			LRU_write = 1;
			if((mem_byte_enable == 2'b10) || (mem_byte_enable == 2'b01))
				stbwritemux_select = 1;
			if(way0and_out)
			begin
				writedata0 = 1;
				writetag0 = 1;
				writevalid0 = 1;
				writedirty0 = 1;
				inputdirty0 = 1;
				LRU_in = 1;
			end
			else 
			begin
				writedata1 = 1;
				writetag1 = 1;
				writevalid1 = 1;
				writedirty1 = 1;
				inputdirty1 = 1;
				LRU_in = 0;
			end
				mem_response = 1;
						MUXRW_select = 1;
					end
				end
		  cacheupdatess: begin
				if(mem_read)
					LRU_write = 1;
					if(way0and_out && hit)
						LRU_in = 1;
					else if(!way0and_out && hit)
						LRU_in = 0;
		  end
		  physicalmemss: begin
				if(mem_write)
				begin
					if((mem_byte_enable == 2'b10) || (mem_byte_enable == 2'b01))
						stbwritemux_select = 1;
					MUXRW_select = 1;
					if(outputLRU == 0)
					begin
						writedata0 = 1;
						writetag0 = 1;
						writevalid0 = 1;
						writedirty0 = 1;
						inputdirty0 = 1;
						LRU_in = 1;
					end
					else 
					begin
						writedata1 = 1;
						writetag1 = 1;
						writevalid1 = 1;
						writedirty1 = 1;
						inputdirty1 = 1;
						LRU_in = 0;
					end
				end
				mem_response = 1;
		  end
		  writebackss: begin
				writephysicalmem = 1;
				physicalmemMXselect = 1;
		  end
		  allocatess: begin
				readphysicalmem = 1;
				if(outputLRU == 0)
				begin
					writedata0 = 1;
					writetag0 = 1;
					writevalid0 = 1;
					writedirty0 = 1;
					inputdirty0 =0;
				end
				else 
				begin
					writedata1 = 1;
					writetag1 = 1;
					writevalid1 = 1;
					writedirty1 = 1;
					inputdirty1 = 0;
				end
		  end
     default:/* Do nothing */;
     endcase 
end

always_comb
begin : next_state_logic
    /* Next state information and conditions (if any)
     * for transitioning between states */
     next_state = state;

     case(state)
         idless:
				if(mem_read && hit && DCache_enable)
					next_state = idless;
				else if(!hit && !dirtymux_out && DCache_enable)
					next_state = allocatess;
				else if(!hit && dirtymux_out && DCache_enable)
					next_state = writebackss;
			cacheupdatess:
				next_state = physicalmemss;
			physicalmemss:
				next_state = idless;
			writebackss:
				if(physicalmem_response == 0)
					next_state = writebackss;
				else
					next_state = allocatess;
			allocatess:
				if(physicalmem_response == 0)
					next_state = allocatess;
				else
					next_state = cacheupdatess;
			
		  default: 
				next_state = idless;
        endcase
end

always_ff @(posedge clk)
begin: next_state_assignment
    /* Assignment of next state on clock edge */
     begin : next_state_assignment
         state <= next_state;
     end
end

endmodule



//This is the top evel modle for the DCache

import LC_3B_2s::*;
module L1_DCache(
    input clk,
	 input cache_line physicalmem_rdata,
	 input logic physicalmem_response,
	 input LC_3B_mem_wmask mem_byte_enable,
	 input LC_3B_word mem_addr,
	 input LC_3B_word mem_wdata,
	 input mem_read,
    input mem_write,
	 input DCache_enable,


    /* Memory signals */
    output mem_response,
    output LC_3B_word mem_rdata,
	 output logic hit,


	 output logic readphysicalmem,
	 output logic writephysicalmem,
	 output LC_3B_word physicalmem_addr,
	 output cache_line physicalmem_wdata
	 
);


/*internal signals*/

logic outputLRU;
logic writedata0;
logic writedata1;
logic writevalid0;
logic writevalid1;
logic writetag0;
logic writetag1;
logic LRU_in;
logic way0and_out;
logic LRU_write;
logic dirtymux_out;
logic stbwritemux_select;
logic MUXRW_select;
logic writedirty0;
logic writedirty1;
logic inputdirty0;
logic inputdirty1;
logic physicalmemMXselect;


CONTROLLER_DCache CONTROLLER_DCache
(
	 .clk,
    .mem_addr(mem_addr),
	 .mem_byte_enable(mem_byte_enable),
	 .mem_write(mem_write),
	 .mem_read(mem_read),
	 .mem_wdata(mem_wdata),
	 .outputLRU(outputLRU),
	 .LRU_in(LRU_in),
	 .way0and_out(way0and_out),
	 .LRU_write(LRU_write),
	 .DCache_enable(DCache_enable),
	 
     
     /* Datapath controls */
    .physicalmem_rdata(physicalmem_rdata),
	 .physicalmem_response(physicalmem_response),
	 .dirtymux_out(dirtymux_out),
	 .hit(hit),
	 
	 .physicalmemMXselect(physicalmemMXselect),
	 .MUXRW_select(MUXRW_select),
	 .stbwritemux_select(stbwritemux_select),
	 .mem_response(mem_response),
    .readphysicalmem(readphysicalmem),
	 .writedata0(writedata0),
	 .writedata1(writedata1),
	 .writetag0(writetag0), 
	 .writetag1(writetag1),
	 .writevalid0(writevalid0),
	 .writevalid1(writevalid1),
	 .writedirty0(writedirty0),
	 .writedirty1(writedirty1),
	 .inputdirty0(inputdirty0),
	 .inputdirty1(inputdirty1),
    .writephysicalmem(writephysicalmem)
);

DatapathCache  DatapathCache
(
    .clk,
	 /*inputs from cpu*/
	 .mem_addr(mem_addr),
	 .writedata0(writedata0),
	 .writedata1(writedata1),
	 .writetag0(writetag0),
	 .writetag1(writetag1),
	 .writevalid0(writevalid0),
	 .writevalid1(writevalid1),
	 .writedirty0(writedirty0),
	 .writedirty1(writedirty1),
	 .inputdirty0(inputdirty0),
	 .inputdirty1(inputdirty1),
	 .physicalmem_rdata(physicalmem_rdata),
	 .mem_wdata(mem_wdata),
	 .mem_rdata(mem_rdata),
	 .mem_byte_enable(mem_byte_enable),
	 .LRU_in(LRU_in),
	 .LRU_write(LRU_write),
	 .way0and_out(way0and_out),
	 .MUXRW_select(MUXRW_select),
	 .stbwritemux_select(stbwritemux_select),
	 .physicalmemMXselect(physicalmemMXselect),

    .hit(hit),
	 .dirtymux_out(dirtymux_out),
	 .outputLRU(outputLRU),
	 .physicalmem_addr(physicalmem_addr),
	 .physicalmem_wdata(physicalmem_wdata)
);


endmodule



//////////////////////////////////////////////////////////
////////////////ICACHE MODULES NOW////////////////////////
//////////////////////////////////////////////////////////


//This module hold the cache controller whihc basically contains the state machine that is there for the cache

import LC_3B_2s::*; /* Import types defined in LC_3B_2s.sv */

module CONTROLLER_ICache
(
    /* Input and output port declarations */
    input clk,
    input LC_3B_word mem_addr,
	 input [1:0] mem_byte_enable,
	 input mem_write,
	 input mem_read,
	 input LC_3B_word mem_wdata,
	 input logic outputLRU,
	 input logic way0and_out,
	 
     
     /* Datapath controls */
    input cache_line physicalmem_rdata,
	 input physicalmem_response,
	 input logic dirtymux_out,
	 input logic hit,
	 input logic TRUE_BR,
	 
	 output logic MUXRW_select,
	 output logic stbwritemux_select,
	 output logic LRU_in,
	 output logic mem_response,
    output logic readphysicalmem,
	 output logic writedata0, writedata1,
	 output logic writetag0, writetag1,
	 output logic writevalid0, writevalid1,
	 output logic writedirty0, writedirty1,
	 output logic inputdirty0, inputdirty1,
    output logic writephysicalmem,
	 output logic physicalmemMXselect,
	 output logic LRU_write,
	 output logic idle_state
);

enum int unsigned {
    /* List of states */
    idless,
	 cacheupdatess,
	 physicalmemss,
	 writebackss,
	 allocatess
} state, next_state;

always_comb
begin : state_actions
    /* Default output assignments */
    writetag0 = 1'b0;
	 stbwritemux_select = 1'b0;
	 MUXRW_select = 1'b0;
	 writetag1 = 1'b0;
	 writedata0 = 1'b0;
	 writedata1 = 1'b0;
	 writevalid0 = 1'b0;
	 writevalid1 = 1'b0;
	 writedirty0 = 1'b0;
	 writedirty1 = 1'b0;
	 inputdirty0 = 1'b0;
	 inputdirty1 = 1'b0;
	 mem_response = 1'b0;
	 readphysicalmem = 1'b0;
	 LRU_in = 1'b0;
	 LRU_write = 1'b0;
	 writephysicalmem = 1'b0;
	 physicalmemMXselect = 1'b0;
	 idle_state = 1'b0;
    /* Actions for each state */
     
     case(state)
        idless: begin
				LRU_write = 0;
				idle_state = 1;
				if(mem_read && hit)
				begin
					mem_response = 1;
					LRU_write = 1;
					if(way0and_out && hit)
						LRU_in = 1;
					else if(!way0and_out && hit)
						LRU_in = 0;
				end
				else if((mem_write && hit) && (mem_byte_enable != 2'b00))
				begin
					LRU_write = 1;
					if(way0and_out)
						begin
							writedata0 = 1;
							writetag0 = 1;
							writevalid0 = 1;
							writedirty0 = 1;
							inputdirty0 = 1;
							LRU_in = 1;
						end
						else 
						begin
							writedata1 = 1;
							writetag1 = 1;
							writevalid1 = 1;
							writedirty1 = 1;
							inputdirty1 = 1;
							LRU_in = 0;
						end
						mem_response = 1;
						MUXRW_select = 1;
					end
				end
		  cacheupdatess: begin
				if(mem_read)
					LRU_write = 1;
					if(way0and_out && hit)
						LRU_in = 1;
					else if(!way0and_out && hit)
						LRU_in = 0;
		  end
		  physicalmemss: begin
				if(mem_write)
				begin
					if((mem_byte_enable == 2'b10) | (mem_byte_enable == 2'b01))
						stbwritemux_select = 1;
					MUXRW_select = 1;
					if(outputLRU == 0)
					begin
						writedata0 = 1;
						writetag0 = 1;
						writevalid0 = 1;
						writedirty0 = 1;
						inputdirty0 = 1;
						LRU_in = 1;
					end
					else 
					begin
						writedata1 = 1;
						writetag1 = 1;
						writevalid1 = 1;
						writedirty1 = 1;
						inputdirty1 = 1;
						LRU_in = 0;
					end
				end
				mem_response = 1;
		  end
		  writebackss: begin
				writephysicalmem = 1;
				physicalmemMXselect = 1;
		  end
		  allocatess: begin
				readphysicalmem = 1;
				if(outputLRU == 0)
				begin
					writedata0 = 1;
					writetag0 = 1;
					writevalid0 = 1;
					writedirty0 = 1;
					inputdirty0 =0;
				end
				else 
				begin
					writedata1 = 1;
					writetag1 = 1;
					writevalid1 = 1;
					writedirty1 = 1;
					inputdirty1 = 0;
				end
		  end
     default:/* Do nothing */;
     endcase 
end

always_comb
begin : next_state_logic
    /* Next state information and conditions (if any)
     * for transitioning between states */
     next_state = state;

     case(state)
         idless:
				if(mem_read && hit)
					next_state = idless;
				else if(!hit && !dirtymux_out && !TRUE_BR)
					next_state = allocatess;
				else if(!hit && dirtymux_out)
					next_state = writebackss;
			cacheupdatess:
				next_state = physicalmemss;
			physicalmemss:
				next_state = idless;
			writebackss:
				if(physicalmem_response == 0)
					next_state = writebackss;
				else
					next_state = allocatess;
			allocatess:
				if(physicalmem_response == 0)
					next_state = allocatess;
				else
					next_state = cacheupdatess;
			
		  default: 
				next_state = idless;
        endcase
end

always_ff @(posedge clk)
begin: next_state_assignment
    /* Assignment of next state on clock edge */
     begin : next_state_assignment
         state <= next_state;
     end
end

endmodule



//This is the top evel modle for L1ICache
import LC_3B_2s::*;

module L1_ICache
(
    input clk,
	 input cache_line physicalmem_rdata,
	 input logic physicalmem_response,
	 input LC_3B_mem_wmask mem_byte_enable,
	 input LC_3B_word mem_addr,
	 input LC_3B_word mem_wdata,
	 input mem_read,
    input mem_write,
	 input TRUE_BR,


    /* Memory signals */
    output mem_response,
    output LC_3B_word mem_rdata,


	 output logic readphysicalmem,
	 output logic writephysicalmem,
	 output logic idle_state,
	 output LC_3B_word physicalmem_addr,
	 output cache_line physicalmem_wdata
	 
);


/*internal signals*/

logic hit;
logic outputLRU;
logic writedata0;
logic writedata1;
logic writevalid0;
logic writevalid1;
logic writetag0;
logic writetag1;
logic LRU_in;
logic way0and_out;
logic LRU_write;
logic dirtymux_out;
logic stbwritemux_select;
logic MUXRW_select;
logic writedirty0;
logic writedirty1;
logic inputdirty0;
logic inputdirty1;
logic physicalmemMXselect;


CONTROLLER_ICache CONTROLLER_ICache
(
	 .clk,
    .mem_addr(mem_addr),
	 .mem_byte_enable(mem_byte_enable),
	 .mem_write(mem_write),
	 .mem_read(mem_read),
	 .mem_wdata(mem_wdata),
	 .outputLRU(outputLRU),
	 .LRU_in(LRU_in),
	 .way0and_out(way0and_out),
	 .LRU_write(LRU_write),
	 
     
     /* Datapath controls */
    .physicalmem_rdata(physicalmem_rdata),
	 .physicalmem_response(physicalmem_response),
	 .dirtymux_out(dirtymux_out),
	 .hit(hit),
	 .TRUE_BR(TRUE_BR),
	 
	 .physicalmemMXselect(physicalmemMXselect),
	 .MUXRW_select(MUXRW_select),
	 .stbwritemux_select(stbwritemux_select),
	 .mem_response(mem_response),
    .readphysicalmem(readphysicalmem),
	 .writedata0(writedata0),
	 .writedata1(writedata1),
	 .writetag0(writetag0), 
	 .writetag1(writetag1),
	 .writevalid0(writevalid0),
	 .writevalid1(writevalid1),
	 .writedirty0(writedirty0),
	 .writedirty1(writedirty1),
	 .inputdirty0(inputdirty0),
	 .inputdirty1(inputdirty1),
	 .idle_state(idle_state),
    .writephysicalmem(writephysicalmem)
);

DatapathCache  DatapathCache
(
    .clk,
	 /*inputs from cpu*/
	 .mem_addr(mem_addr),
	 .writedata0(writedata0),
	 .writedata1(writedata1),
	 .writetag0(writetag0),
	 .writetag1(writetag1),
	 .writevalid0(writevalid0),
	 .writevalid1(writevalid1),
	 .writedirty0(writedirty0),
	 .writedirty1(writedirty1),
	 .inputdirty0(inputdirty0),
	 .inputdirty1(inputdirty1),
	 .physicalmem_rdata(physicalmem_rdata),
	 .mem_wdata(mem_wdata),
	 .mem_rdata(mem_rdata),
	 .mem_byte_enable(mem_byte_enable),
	 .LRU_in(LRU_in),
	 .LRU_write(LRU_write),
	 .way0and_out(way0and_out),
	 .MUXRW_select(MUXRW_select),
	 .stbwritemux_select(stbwritemux_select),
	 .physicalmemMXselect(physicalmemMXselect),

    .hit(hit),
	 .dirtymux_out(dirtymux_out),
	 .outputLRU(outputLRU),
	 .physicalmem_addr(physicalmem_addr),
	 .physicalmem_wdata(physicalmem_wdata)
);


endmodule
